version: '3.9'

services:
  # dev
  frontend:
    build:
      context: ./frontend
      target: dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${PORT_FRONTEND}:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    env_file:
      - ./frontend/.env
    depends_on:
      - backend
  # prod
  # frontend:
    # build:
    #   context: ./frontend
    #   target: runner
    # ports:
    #   - "${PORT_FRONTEND}:3000"
    # environment:
    #   - NODE_ENV=production
    #   - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    # env_file:
    #   - ./frontend/.env
    # depends_on:
    #   - backend
    # restart: unless-stopped

  backend:
    build:
      context: ./backend
      target: dev
    ports:
      - "${PORT_BACKEND}:${PORT_BACKEND}"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
    env_file:
      - ./backend/.env
    depends_on:
      - db

  db:
    image: postgres:15
    restart: always
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}

volumes:
  pgdata:
